#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var serverX = http.Server(app);
const fs = require("fs");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
const {
  parse
} = require("papaparse");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function readFile(file) {
  return parse(fs.readFileSync(file, 'utf8'), {
    complete: function (results, file) {
      console.log('Loading tweets');
      tweetsList = results.data;
    }
  })
}

const file = "./tweets.csv";
let tweetsList = undefined;

readFile(file);
io.on("connection", function (socket) {

  const tweet = (t) => {
    socket.emit('tweet', {
      text: t
    });
  };

  function doInLoop(c) {
    if (c > 0) {
      var cb = () => {
        return () => {
          if (tweetsList) {
            c--;
            tweet(tweetsList[c]);
          }
          doInLoop(c);
        }
      };
      setTimeout(cb(), Math.random() * 3000);
    }
  }
  doInLoop(300, tweet);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
