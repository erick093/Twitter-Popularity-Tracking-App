#!/usr/bin/env node

// import {Tweet} from "../models/tweet";

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const fs = require("fs");
const Twit = require('twit');
const Tweet = require('../models/tweet');
const Twitter = require('node-tweet-stream')
    , t = new Twitter({
    consumer_key: 'Zk9Glqw4fF3rZI84yLmjdICm5',
    consumer_secret: 'dMv28j60Y0XCf8S1PUfJXoVWMWMQH5UkdtsOvPDWFqo1JFlW6Q',
    token: '474508954-4kp4veZONyNbX8ukHloMNecRatqy4e9BFeI2XNgT',
    token_secret: 'hwg96Nju4SaiSfx9QKvjB9YCn7EkEqrkMe36m8mn9lIEC'
});


/**
 * Get port from environment and store in Express.
 */
app.get('/hello',function (req, res, next) {
    res.send('respond with a resource');
});
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server);
const {
    parse
} = require("papaparse");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// Using Twit library for making streams
// const twitter = new Twit(dataAuth);
const dataAuth = {
    consumer_key: 'Zk9Glqw4fF3rZI84yLmjdICm5',
    consumer_secret: 'dMv28j60Y0XCf8S1PUfJXoVWMWMQH5UkdtsOvPDWFqo1JFlW6Q',
    access_token: '474508954-4kp4veZONyNbX8ukHloMNecRatqy4e9BFeI2XNgT',
    access_token_secret: 'hwg96Nju4SaiSfx9QKvjB9YCn7EkEqrkMe36m8mn9lIEC'
};
// const streamStatuses = twitter.stream('statuses/filter', {track: 'navidad'});
// const streamStatusesNoTrack = twitter.stream('statuses/filter', {track: 'navidad'});

// console.log("Init server");
// io.on("connection", function (socket) {
//     console.log("Init socket connection for a user");
//     console.log("Waiting for twits to come");
//
//     streamStatusesNoTrack.on('tweet', function (tweet) {
//         console.log("tweet!");
//         console.log(tweet);
//         const data = {
//             'name': tweet.user.name,
//             'screen_name': tweet.user.screen_name,
//             'text': tweet.text,
//             'user': tweet.user,
//             'quote_count': tweet.quote_count,
//             'reply_count': tweet.reply_count,
//             'coordinates': tweet.coordinates,
//             'place': tweet.place,
//             'retweet_count': tweet.retweet_count,
//             'favorite_count': tweet.favorite_count,
//             'entities': tweet.entities
//         };
//         // console.log("Data tweet");
//         // console.log(data);
//         // console.log("Scoket from function")
//         socket.emit('tweet', data);
//     });
// });
// Streams of data twitter

// Using twitter stream library

io.on("connection", function (socket) {
    t.on('tweet', function (tweet) {
        console.log('tweet received', tweet)
        const data = {
            'name': tweet.user.name,
            'screen_name': tweet.user.screen_name,
            'text': tweet.text,
            'user': tweet.user,
            'quote_count': tweet.quote_count,
            'reply_count': tweet.reply_count,
            'coordinates': tweet.coordinates,
            'place': tweet.place,
            'retweet_count': tweet.retweet_count,
            'favorite_count': tweet.favorite_count,
            'entities': tweet.entities
        };
        socket.emit('tweet', data);
    });
});


// t.track('navidad');


t.on('error', function (err) {
    console.log('Oh no')
});


// Implementing mock stream of tweets

function readFile(file) {
    return parse(fs.readFileSync(file, 'utf8'), {
        complete: function (results, file) {
            console.log('Loading tweets');
            tweetsList = results.data;
        }
    })
}

const file = "./tweets.csv";
let tweetsList = undefined;
//
// readFile(file);
// io.on("connection", function (socket) {
//
//   const tweet = (t) => {
//     console.log("Something here?");
//     socket.emit('tweet', {
//       text: t
//     });
//   };
//
//   function doInLoop(c) {
//     if (c > 0) {
//       var cb = () => {
//         return () => {
//           if (tweetsList) {
//             c--;
//             tweet(tweetsList[c]);
//           }
//           doInLoop(c);
//         }
//       };
//       setTimeout(cb(), Math.random() * 3000);
//     }
//   }
//   doInLoop(300, tweet);
// });

// end mocks :)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Server listening on http://0.0.0.0:" + addr.port + "")
}
