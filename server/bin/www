#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var serverX = http.Server(app);
const fs = require("fs");
var Twit = require('twit');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
const {
  parse
} = require("papaparse");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Streams of data twitter :P
const twitter = new Twit({
  consumer_key: 'Zk9Glqw4fF3rZI84yLmjdICm5',
  consumer_secret: 'dMv28j60Y0XCf8S1PUfJXoVWMWMQH5UkdtsOvPDWFqo1JFlW6Q',
  access_token: '474508954-4kp4veZONyNbX8ukHloMNecRatqy4e9BFeI2XNgT',
  access_token_secret: 'hwg96Nju4SaiSfx9QKvjB9YCn7EkEqrkMe36m8mn9lIEC'
});

const stream = twitter.stream('statuses/filter', { track: 'hello' });

console.log("Init server");
// stream.on('tweet', function (tweet) {
//   console.log(tweet)
//   const data = {
//     'name': tweet.user.name,
//     'screen_name': tweet.user.screen_name,
//     'text': tweet.text,
//     'avatar': tweet.user.profile_image_url
//   };
//
//   // socket.emit('tweets', data);
// });
io.on("connection", function (socket) {
  console.log("Init socket connection for a user");
  console.log("Waiting for twits to come");

  stream.on('tweet', function (tweet) {
    console.log("tweet!");
    console.log(tweet);
    const data = {
      'name': tweet.user.name,
      'screen_name': tweet.user.screen_name,
      'text': tweet.text,
      'avatar': tweet.user.profile_image_url
    };
    // console.log("Data tweet");
    // console.log(data);
    // console.log("Scoket from function")
    socket.emit('tweet', data);
  });
});
// Streams of data twitter


// Implementing mock stream of tweets

function readFile(file) {
  return parse(fs.readFileSync(file, 'utf8'), {
    complete: function (results, file) {
      console.log('Loading tweets');
      tweetsList = results.data;
    }
  })
}

const file = "./tweets.csv";
let tweetsList = undefined;
//
// readFile(file);
// io.on("connection", function (socket) {
//
//   const tweet = (t) => {
//     console.log("Something here?");
//     socket.emit('tweet', {
//       text: t
//     });
//   };
//
//   function doInLoop(c) {
//     if (c > 0) {
//       var cb = () => {
//         return () => {
//           if (tweetsList) {
//             c--;
//             tweet(tweetsList[c]);
//           }
//           doInLoop(c);
//         }
//       };
//       setTimeout(cb(), Math.random() * 3000);
//     }
//   }
//   doInLoop(300, tweet);
// });

// end mocks :)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
