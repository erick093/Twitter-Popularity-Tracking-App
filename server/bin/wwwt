#!/usr/bin/env node

// import {Tweet} from "../models/tweet";

/**
 * Module dependencies.
 */
var createError = require('http-errors');
const express = require('express');
const debug = require('debug')('server:server');
const http = require('http');
const fs = require("fs");
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');
const bodyParser = require('body-parser');

var app = express();
app.use(cors());
app.use(cookieParser());
app.use(logger('dev'));
app.use(express.json());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: true
}));
// app.use(bodyParser.urlencoded({ extended: false,limit:'50mb' }));

// // catch 404 and forward to error handler
// app.use(function (req, res, next) {
//     next(createError(404));
// });

const Twitter = require('node-tweet-stream')
    , t = new Twitter({
    consumer_key: 'Zk9Glqw4fF3rZI84yLmjdICm5',
    consumer_secret: 'dMv28j60Y0XCf8S1PUfJXoVWMWMQH5UkdtsOvPDWFqo1JFlW6Q',
    token: '474508954-4kp4veZONyNbX8ukHloMNecRatqy4e9BFeI2XNgT',
    token_secret: 'hwg96Nju4SaiSfx9QKvjB9YCn7EkEqrkMe36m8mn9lIEC'
});


/**
 * Get port from environment and store in Express.
 */
app.get('/', function (req, res, next) {
    res.json({message: 'sockets'});
});

app.post('/changeTrack', function (req, res, next) {
    const body = req.body;
    console.log("body");
    console.log(body);
    t.track(body['track']);
    t.location([]);
    res.json({message: "ok"})
});
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server);
const {
    parse
} = require("papaparse");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on("connection", function (socket) {
    t.on('tweet', function (tweet) {
        // console.log('tweet received', tweet);
        const data = {
            'name': tweet.user.name,
            'screen_name': tweet.user.screen_name,
            'text': tweet.text,
            'user': tweet.user,
            'quote_count': tweet.quote_count,
            'reply_count': tweet.reply_count,
            'coordinates': tweet.coordinates,
            'place': tweet.place,
            'retweet_count': tweet.retweet_count,
            'favorite_count': tweet.favorite_count,
            'entities': tweet.entities
        };
        socket.emit('tweet', data);
    });
});


// t.track('navidad');


t.on('error', function (err) {
    console.log('Oh no')
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Server listening on http://0.0.0.0:" + addr.port + "")
}
